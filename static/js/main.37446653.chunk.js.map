{"version":3,"sources":["SearchingAlgorithms/linearSearch.js","SearchingAlgorithms/binarySearch.js","SearchingAlgorithms/jumpSearch.js","SearchingAlgorithms/exponentialSearch.js","SearchingAlgorithms/interpolationSearch.js","SearchingVisualizer/SearchingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["linearSearch","array","key","animations","i","length","push","binarySearch","low","high","mid","parseInt","jumpSearch","n","step","Math","sqrt","prev","min","exponentialSearch","interpolationSearch","l","h","pos","arrayBars","document","getElementsByClassName","submitted","searched","SearchingVisualizer","props","submitHandler","event","preventDefault","setState","state","changeHandler","target","value","this","resetArray","max","getElementById","floor","random","sort","a","b","resetToTurquoise","disabled","buttonStyle","style","cursor","disableButtons","console","log","getLinearSearch","keyIndex","barStyle","setTimeout","backgroundColor","RESTORE_TIME","restoreButtons","getBinarySearch","getJumpSearch","getExponentialSearch","getInterpolationSearch","header","className","map","index","id","onClick","onSubmit","type","onChange","autoComplete","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.37446653.chunk.js","sourcesContent":["export function getLinearSearch(array, key) {\n    let animations = [];\n    return [animations, linearSearch(array, key, animations)];\n}\n\nfunction linearSearch(array, key, animations) {\n    let index;\n\n    for (let i = 0; i < array.length; i++) {\n        animations.push(i);\n\n        if (array[i] === key) {\n            index = i;\n            return index;\n        }\n    }\n    return -1;\n}","export function getBinarySearch(array, key) {\n    let animations = [];\n    return [animations, binarySearch(array, 0, array.length - 1, key, animations)];\n}\n\nfunction binarySearch(array, low, high, key, animations) {\n    while (low <= high) {\n        let mid = parseInt((low + high) / 2);\n        animations.push(mid);\n\n        if (array[mid] === key) {\n            return mid;\n        }\n        else if (array[mid] < key) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}","export function getJumpSearch(array, key) {\n    let animations = [];\n    return [animations, jumpSearch(array, key, animations)];\n}\n\nfunction jumpSearch(array, key, animations) {\n    let n = array.length;\n    let step = parseInt(Math.sqrt(n));\n    let prev = 0;\n    animations.push(prev);\n\n    while (array[Math.min(step, n) - 1] < key) {\n        prev = step;\n        step = parseInt(step + Math.sqrt(n));\n\n        if (prev >= n) {\n            // recalculate prev since prev was updated previously with step\n            prev = prev - ((n - 1) % parseInt(Math.sqrt(n)))\n            animations.push(prev);\n            animations.push(++prev);\n\n            return -1;\n        }\n\n        animations.push(prev);\n    }\n    while (array[prev] < key) {\n        prev++;\n        animations.push(prev);\n\n        if (prev === Math.min(step, n)) {\n            return -1;\n        }\n    }\n    if (array[prev] === key) {\n        return prev;\n    }\n    return -1;\n}","export function getExponentialSearch(array, key) {\n    let animations = [];\n    return [animations, exponentialSearch(array, key, animations)];\n}\n\nfunction exponentialSearch(array, key, animations) {\n    if (array[0] === key) {\n        animations.push(0);\n        return 0;\n    }\n    let i = 1;\n    while (i < array.length - 1 && array[i] <= key) {\n        i = i * 2;\n    }\n    return binarySearch(array, i/2, Math.min(i, array.length - 1), key, animations);\n}\n\nfunction binarySearch(array, low, high, key, animations) {\n    while (low <= high) {\n        let mid = parseInt((low + high) / 2);\n        animations.push(mid);\n\n        if (array[mid] === key) {\n            return mid;\n        }\n        else if (array[mid] < key) {\n            low = mid + 1;\n        }\n        else {\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n","export function getInterpolationSearch(array, key) {\n    let animations = [];\n    return [animations, interpolationSearch(array, key, animations)];\n}\n\nfunction interpolationSearch(array, key, animations) {\n    let l = 0;\n    let h = array.length - 1;\n\n    while (l <= h && key >= array[l] && key <= array[h]) {\n        if (l === h) {\n            if (array[l] === key) {\n                animations.push(l);\n                return l;\n            }\n            return -1;\n        }\n        // this formula determines whether the algorithm will search closer to the front or to the back, also suggesting where key is\n        let pos = parseInt(l + (((h - l)/(array[h] - array[l])) * (key - array[l])));\n        \n        animations.push(pos);\n        \n        if (array[pos] === key) {\n            return pos;\n        }\n        if (array[pos] < key) {\n            l = pos + 1;\n        }\n        else {\n            h = pos - 1;\n        }\n    }\n\n    if (key < 0) {\n        animations.push(0);\n    }\n    else {\n        animations.push(array.length - 1);\n    }\n\n    return -1;\n}","import React from 'react';\nimport './SearchingVisualizer.css';\nimport {getLinearSearch} from '../SearchingAlgorithms/linearSearch';\nimport {getBinarySearch} from '../SearchingAlgorithms/binarySearch';\nimport {getJumpSearch} from '../SearchingAlgorithms/jumpSearch';\nimport {getExponentialSearch} from '../SearchingAlgorithms/exponentialSearch';\nimport {getInterpolationSearch} from '../SearchingAlgorithms/interpolationSearch';\n\n// constant declared global variables\nconst ANIMATION_SPEED_MS = 1000;\nconst SIZE = 18;\nconst PRIMARY_COLOR = 'turquoise';\nconst SECONDARY_COLOR = 'red';\nconst FOUND_COLOR = '#59D60D';\nconst arrayBars = document.getElementsByClassName('array-bar');\n\n// flags\nlet submitted = false;\nlet searched = false;\n\nexport default class SearchingVisualizer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            array: [],\n            key: null,\n        }\n    };\n\n    componentDidMount() {\n        this.resetArray();\n    }\n\n    resetArray() {\n        const array = [];\n        let key = null;\n\n        document.getElementById('input').value = null;\n\n        for (let i = 0; i < SIZE; i++) {\n            array.push(randomIntFromInterval(1, 99));\n        }\n\n        array.sort(function(a, b){return a - b});\n\n        if (searched) {\n            this.resetToTurquoise();\n        }\n\n        submitted = false;\n\n        this.setState({key});\n        this.setState({array});\n    }\n\n    disableButtons() {\n        document.getElementById(\"reset\").disabled = true;\n        let buttonStyle = document.getElementById(\"reset\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"linearSearch\").disabled = true;\n        buttonStyle = document.getElementById(\"linearSearch\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"binarySearch\").disabled = true;\n        buttonStyle = document.getElementById(\"binarySearch\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"jumpSearch\").disabled = true;\n        buttonStyle = document.getElementById(\"jumpSearch\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"exponentialSearch\").disabled = true;\n        buttonStyle = document.getElementById(\"exponentialSearch\").style;\n        buttonStyle.cursor = \"default\";\n\n        document.getElementById(\"interpolationSearch\").disabled = true;\n        buttonStyle = document.getElementById(\"interpolationSearch\").style;\n        buttonStyle.cursor = \"default\";\n    }\n\n    restoreButtons() {\n        document.getElementById(\"reset\").disabled = false;\n        let buttonStyle = document.getElementById(\"reset\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"linearSearch\").disabled = false;\n        buttonStyle = document.getElementById(\"linearSearch\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"binarySearch\").disabled = false;\n        buttonStyle = document.getElementById(\"binarySearch\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"jumpSearch\").disabled = false;\n        buttonStyle = document.getElementById(\"jumpSearch\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"exponentialSearch\").disabled = false;\n        buttonStyle = document.getElementById(\"exponentialSearch\").style;\n        buttonStyle.cursor = \"pointer\";\n\n        document.getElementById(\"interpolationSearch\").disabled = false;\n        buttonStyle = document.getElementById(\"interpolationSearch\").style;\n        buttonStyle.cursor = \"pointer\";\n    }\n\n    linearSearch() {\n        if (searched) {\n            this.resetToTurquoise();\n        }\n\n        this.disableButtons();\n        searched = true;\n\n        console.log(\"Key: \" + this.state.key);\n\n        const [animations, keyIndex] = getLinearSearch(this.state.array, this.state.key);\n        console.log(\"Index: \" + keyIndex);\n\n        for (let i = 0; i < animations.length; i++) {\n            const barStyle = arrayBars[i].style;\n\n            setTimeout(() => {\n                barStyle.backgroundColor = SECONDARY_COLOR;\n                if (i >= 1) {\n                    const resetStyle = arrayBars[i - 1].style;\n                    resetStyle.backgroundColor = PRIMARY_COLOR;\n                }\n                setTimeout(() => {\n                    if (this.state.array[i] === this.state.key) {\n                        barStyle.backgroundColor = FOUND_COLOR;\n                    }\n                    else {\n                        barStyle.backgroundColor = PRIMARY_COLOR;\n                    }\n                }, ANIMATION_SPEED_MS);\n            }, i * ANIMATION_SPEED_MS);\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 + 3000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    binarySearch() {\n        if (searched) {\n            this.resetToTurquoise();\n        }\n\n        this.disableButtons();\n        searched = true;\n\n        console.log(\"Key: \" + this.state.key);\n\n        const [animations, keyIndex] = getBinarySearch(this.state.array, this.state.key);\n        console.log(\"Index: \" + keyIndex);\n\n        for (let i = 0; i < animations.length; i++) {\n            const barStyle = arrayBars[animations[i]].style;\n\n            setTimeout(() => {\n                barStyle.backgroundColor = SECONDARY_COLOR;\n                if (i >= 1) {\n                    const resetStyle = arrayBars[animations[i - 1]].style;\n                    resetStyle.backgroundColor = PRIMARY_COLOR;\n                }\n                setTimeout(() => {\n                    if (animations[i] === keyIndex) {\n                        barStyle.backgroundColor = FOUND_COLOR;\n                    }\n                    else {\n                        barStyle.backgroundColor = PRIMARY_COLOR;\n                    }\n                }, ANIMATION_SPEED_MS);\n            }, i * ANIMATION_SPEED_MS);\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 - 1000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    jumpSearch() {\n        if (searched) {\n            this.resetToTurquoise();\n        }\n\n        this.disableButtons();\n        searched = true;\n\n        console.log(\"Key: \" + this.state.key);\n\n        const [animations, keyIndex] = getJumpSearch(this.state.array, this.state.key);\n        console.log(\"Index: \" + keyIndex);\n\n        for (let i = 0; i < animations.length; i++) {\n            const barStyle = arrayBars[animations[i]].style;\n\n            setTimeout(() => {\n                barStyle.backgroundColor = SECONDARY_COLOR;\n                if (i >= 1) {\n                    const resetStyle = arrayBars[animations[i - 1]].style;\n                    resetStyle.backgroundColor = PRIMARY_COLOR;\n                }\n                setTimeout(() => {\n                    if (animations[i] === keyIndex) {\n                        barStyle.backgroundColor = FOUND_COLOR;\n                    }\n                    else {\n                        barStyle.backgroundColor = PRIMARY_COLOR;\n                    }\n                }, ANIMATION_SPEED_MS);\n            }, i * ANIMATION_SPEED_MS);\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 - 1000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    exponentialSearch() {\n        if (searched) {\n            this.resetToTurquoise();\n        }\n\n        this.disableButtons();\n        searched = true;\n\n        console.log(\"Key: \" + this.state.key);\n\n        const [animations, keyIndex] = getExponentialSearch(this.state.array, this.state.key);\n        console.log(\"Index: \" + keyIndex);\n\n        for (let i = 0; i < animations.length; i++) {\n            const barStyle = arrayBars[animations[i]].style;\n\n            setTimeout(() => {\n                barStyle.backgroundColor = SECONDARY_COLOR;\n                if (i >= 1) {\n                    const resetStyle = arrayBars[animations[i - 1]].style;\n                    resetStyle.backgroundColor = PRIMARY_COLOR;\n                }\n                setTimeout(() => {\n                    if (animations[i] === keyIndex) {\n                        barStyle.backgroundColor = FOUND_COLOR;\n                    }\n                    else {\n                        barStyle.backgroundColor = PRIMARY_COLOR;\n                    }\n                }, ANIMATION_SPEED_MS);\n            }, i * ANIMATION_SPEED_MS);\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 - 1000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    interpolationSearch() {\n        if (searched) {\n            this.resetToTurquoise();\n        }\n\n        this.disableButtons();\n        searched = true;\n\n        console.log(\"Key: \" + this.state.key);\n\n        const [animations, keyIndex] = getInterpolationSearch(this.state.array, this.state.key);\n        console.log(\"Index: \" + keyIndex);\n\n        for (let i = 0; i < animations.length; i++) {\n            const barStyle = arrayBars[animations[i]].style;\n\n            setTimeout(() => {\n                barStyle.backgroundColor = SECONDARY_COLOR;\n                if (i >= 1) {\n                    const resetStyle = arrayBars[animations[i - 1]].style;\n                    resetStyle.backgroundColor = PRIMARY_COLOR;\n                }\n                setTimeout(() => {\n                    if (animations[i] === keyIndex) {\n                        barStyle.backgroundColor = FOUND_COLOR;\n                    }\n                    else {\n                        barStyle.backgroundColor = PRIMARY_COLOR;\n                    }\n                }, ANIMATION_SPEED_MS);\n            }, i * ANIMATION_SPEED_MS);\n        }\n        const RESTORE_TIME = parseInt(ANIMATION_SPEED_MS*animations.length/2 - 1000);\n        setTimeout(() => this.restoreButtons(), RESTORE_TIME); \n    }\n\n    resetToTurquoise() {\n        for (let i = 0; i < this.state.array.length; i++) {\n            const barStyles = arrayBars[i].style;\n            barStyles.backgroundColor = PRIMARY_COLOR;\n        }\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.setState({key: parseInt(this.state.key)});\n        submitted = true;\n    }\n\n    changeHandler = (event) => {\n        this.setState({key: event.target.value});\n    }\n\n    render() {\n        const {array} = this.state;\n\n        let header = '';\n        if (submitted) {\n            header = <h1>Key: {this.state.key}</h1>;\n        }\n\n        return (\n            <>\n            <div className=\"array-container\">\n                {array.map((value, index) => (\n                    <div className=\"array-bar\" key={index}>\n                        {value}\n                    </div>\n                ))}\n            </div>\n            <div className=\"buttons\">\n                <button id=\"reset\" onClick={() => this.resetArray()}>Reset</button>\n                <button id=\"linearSearch\" onClick={() => this.linearSearch()}>Linear Search</button>\n                <button id=\"binarySearch\" onClick={() => this.binarySearch()}>Binary Search</button>\n                <button id=\"jumpSearch\" onClick={() => this.jumpSearch()}>Jump Search</button>\n                <button id=\"exponentialSearch\" onClick={() => this.exponentialSearch()}>Exponential Search</button>\n                <button id=\"interpolationSearch\" onClick={() => this.interpolationSearch()}>Interpolation Search</button>\n            </div>\n            <label id=\"label\">\n                <form onSubmit={this.submitHandler}>\n                    {header}\n                    <p>Enter the key value:</p>\n                    <input id=\"input\" type=\"text\" onChange={this.changeHandler} autoComplete=\"off\"/>\n                    <input type=\"submit\" value=\"Submit\"/>\n                </form>\n            </label>\n            </>\n        )\n    }\n}\n\nfunction randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from 'react';\nimport SearchingVisualizer from './SearchingVisualizer/SearchingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SearchingVisualizer></SearchingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}